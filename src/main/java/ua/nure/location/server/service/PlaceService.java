
package ua.nure.location.server.service;

import jakarta.jws.WebMethod;
import jakarta.jws.WebParam;
import jakarta.jws.WebResult;
import jakarta.jws.WebService;
import jakarta.jws.soap.SOAPBinding;
import jakarta.xml.bind.annotation.XmlSeeAlso;
import jakarta.xml.ws.Action;
import jakarta.xml.ws.FaultAction;
import jakarta.xml.ws.Holder;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 3.0.0
 * Generated source version: 3.0
 * 
 */
@WebService(name = "PlaceService", targetNamespace = "http://location.nure.ua/server/service")
@SOAPBinding(parameterStyle = SOAPBinding.ParameterStyle.BARE)
@XmlSeeAlso({
    ua.nure.location.entity.ObjectFactory.class,
    ua.nure.location.server.service.ObjectFactory.class
})
public interface PlaceService {


    /**
     * 
     * @param clientToken
     * @param parameters
     * @param serverToken
     * @return
     *     returns ua.nure.location.server.service.AddPlaceResponse
     * @throws DAOException_Exception
     */
    @WebMethod
    @WebResult(name = "addPlaceResponse", targetNamespace = "http://location.nure.ua/server/service", partName = "result")
    @Action(input = "http://location.nure.ua/server/service/PlaceService/addPlaceRequest", output = "http://location.nure.ua/server/service/PlaceService/addPlaceResponse", fault = {
        @FaultAction(className = DAOException_Exception.class, value = "http://location.nure.ua/server/service/PlaceService/addPlace/Fault/DAOException")
    })
    public AddPlaceResponse addPlace(
        @WebParam(name = "addPlace", targetNamespace = "http://location.nure.ua/server/service", partName = "parameters")
        AddPlace parameters,
        @WebParam(name = "clientToken", targetNamespace = "http://location.nure.ua/server/service", header = true, partName = "clientToken")
        SecurityHeader clientToken,
        @WebParam(name = "serverToken", targetNamespace = "http://location.nure.ua/server/service", header = true, mode = WebParam.Mode.OUT, partName = "serverToken")
        Holder<SecurityHeader> serverToken)
        throws DAOException_Exception
    ;

    /**
     * 
     * @param clientToken
     * @param parameters
     * @param serverToken
     * @return
     *     returns ua.nure.location.server.service.ListPlacesResponse
     */
    @WebMethod
    @WebResult(name = "listPlacesResponse", targetNamespace = "http://location.nure.ua/server/service", partName = "result")
    @Action(input = "http://location.nure.ua/server/service/PlaceService/listPlacesRequest", output = "http://location.nure.ua/server/service/PlaceService/listPlacesResponse")
    public ListPlacesResponse listPlaces(
        @WebParam(name = "listPlaces", targetNamespace = "http://location.nure.ua/server/service", partName = "parameters")
        ListPlaces parameters,
        @WebParam(name = "clientToken", targetNamespace = "http://location.nure.ua/server/service", header = true, partName = "clientToken")
        SecurityHeader clientToken,
        @WebParam(name = "serverToken", targetNamespace = "http://location.nure.ua/server/service", header = true, mode = WebParam.Mode.OUT, partName = "serverToken")
        Holder<SecurityHeader> serverToken);

    /**
     * 
     * @param clientToken
     * @param parameters
     * @param serverToken
     * @return
     *     returns ua.nure.location.server.service.GetPlaceResponse
     * @throws DAOException_Exception
     */
    @WebMethod
    @WebResult(name = "getPlaceResponse", targetNamespace = "http://location.nure.ua/server/service", partName = "result")
    @Action(input = "http://location.nure.ua/server/service/PlaceService/getPlaceRequest", output = "http://location.nure.ua/server/service/PlaceService/getPlaceResponse", fault = {
        @FaultAction(className = DAOException_Exception.class, value = "http://location.nure.ua/server/service/PlaceService/getPlace/Fault/DAOException")
    })
    public GetPlaceResponse getPlace(
        @WebParam(name = "getPlace", targetNamespace = "http://location.nure.ua/server/service", partName = "parameters")
        GetPlace parameters,
        @WebParam(name = "clientToken", targetNamespace = "http://location.nure.ua/server/service", header = true, partName = "clientToken")
        SecurityHeader clientToken,
        @WebParam(name = "serverToken", targetNamespace = "http://location.nure.ua/server/service", header = true, mode = WebParam.Mode.OUT, partName = "serverToken")
        Holder<SecurityHeader> serverToken)
        throws DAOException_Exception
    ;

    /**
     * 
     * @param clientToken
     * @param parameters
     * @param serverToken
     * @return
     *     returns ua.nure.location.server.service.DeletePlaceResponse
     * @throws DAOException_Exception
     */
    @WebMethod
    @WebResult(name = "deletePlaceResponse", targetNamespace = "http://location.nure.ua/server/service", partName = "result")
    @Action(input = "http://location.nure.ua/server/service/PlaceService/deletePlaceRequest", output = "http://location.nure.ua/server/service/PlaceService/deletePlaceResponse", fault = {
        @FaultAction(className = DAOException_Exception.class, value = "http://location.nure.ua/server/service/PlaceService/deletePlace/Fault/DAOException")
    })
    public DeletePlaceResponse deletePlace(
        @WebParam(name = "deletePlace", targetNamespace = "http://location.nure.ua/server/service", partName = "parameters")
        DeletePlace parameters,
        @WebParam(name = "clientToken", targetNamespace = "http://location.nure.ua/server/service", header = true, partName = "clientToken")
        SecurityHeader clientToken,
        @WebParam(name = "serverToken", targetNamespace = "http://location.nure.ua/server/service", header = true, mode = WebParam.Mode.OUT, partName = "serverToken")
        Holder<SecurityHeader> serverToken)
        throws DAOException_Exception
    ;

    /**
     * 
     * @param clientToken
     * @param parameters
     * @param serverToken
     * @return
     *     returns ua.nure.location.server.service.FindByActivityTypeResponse
     * @throws ValidationException_Exception
     */
    @WebMethod
    @WebResult(name = "findByActivityTypeResponse", targetNamespace = "http://location.nure.ua/server/service", partName = "result")
    @Action(input = "http://location.nure.ua/server/service/PlaceService/findByActivityTypeRequest", output = "http://location.nure.ua/server/service/PlaceService/findByActivityTypeResponse", fault = {
        @FaultAction(className = ValidationException_Exception.class, value = "http://location.nure.ua/server/service/PlaceService/findByActivityType/Fault/ValidationException")
    })
    public FindByActivityTypeResponse findByActivityType(
        @WebParam(name = "findByActivityType", targetNamespace = "http://location.nure.ua/server/service", partName = "parameters")
        FindByActivityType parameters,
        @WebParam(name = "clientToken", targetNamespace = "http://location.nure.ua/server/service", header = true, partName = "clientToken")
        SecurityHeader clientToken,
        @WebParam(name = "serverToken", targetNamespace = "http://location.nure.ua/server/service", header = true, mode = WebParam.Mode.OUT, partName = "serverToken")
        Holder<SecurityHeader> serverToken)
        throws ValidationException_Exception
    ;

}
